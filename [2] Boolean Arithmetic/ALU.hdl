// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
// Student name: Aditya Joshi (1adityajoshi@gmail.com)

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
   // Put you code here:
   
   // Implemented only the zx bit part. Negating a if zx == 1 else do nothing. 
    Xor(a=a,b=a,out=a0);
    Xor(a=a,b=a,out=a1);
	Xor(a=a,b=a,out=a2);
	Xor(a=a,b=a,out=a3);
	Xor(a=a,b=a,out=a4);
	Xor(a=a,b=a,out=a5);
	Xor(a=a,b=a,out=a6);
	Xor(a=a,b=a,out=a7);
	Xor(a=a,b=a,out=a8);
	Xor(a=a,b=a,out=a9);
	Xor(a=a,b=a,out=a10);
	Xor(a=a,b=a,out=a11);
	Xor(a=a,b=a,out=a12);
	Xor(a=a,b=a,out=a13);
	Xor(a=a,b=a,out=a14);
	Xor(a=a,b=a,out=a15);

	Mux(a=a[0],b=a0,sel=zx,out=a[0]);
	Mux(a=a[1],b=a1,sel=zx,out=a[1]);
	Mux(a=a[2],b=a2,sel=zx,out=a[2]);
	Mux(a=a[3],b=a3,sel=zx,out=a[3]);
	Mux(a=a[4],b=a4,sel=zx,out=a[4]);
	Mux(a=a[5],b=a5,sel=zx,out=a[5]);
	Mux(a=a[6],b=a6,sel=zx,out=a[6]);
	Mux(a=a[7],b=a7,sel=zx,out=a[7]);
	Mux(a=a[8],b=a8,sel=zx,out=a[8]);
	Mux(a=a[9],b=a9,sel=zx,out=a[9]);
	Mux(a=a[10],b=a10,sel=zx,out=a[10]);
	Mux(a=a[11],b=a11,sel=zx,out=a[11]);
	Mux(a=a[12],b=a12,sel=zx,out=a[12]);
	Mux(a=a[13],b=a13,sel=zx,out=a[13]);
	Mux(a=a[14],b=a14,sel=zx,out=a[14]);
	Mux(a=a[15],b=a15,sel=zx,out=a[15]);
   
}